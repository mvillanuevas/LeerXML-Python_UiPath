' Arreglo de hojas de refacturación
Dim refacturacionSheets, bloque
refacturacionSheets = Array("BL29", "BL10", "BL11", "BL14")

' Iteraer sobre las hojas de refacturación
Dim i

For i = LBound(refacturacionSheets) To UBound(refacturacionSheets)
    Dim sheetName
    sheetName = refacturacionSheets(i)
    
    ' Verificar si la hoja existe en el libro de refacturación
    If SheetExists(objWorkbookPathRef, sheetName) Then
        Set objWorkbookSheetRef = objWorkbookPathRef.Worksheets(sheetName)

        ' Verificar si los filtros están activos en la fila 1, si no, activarlos
        If objWorkbookSheetRexmex.AutoFilterMode Then
            objWorkbookSheetRexmex.AutoFilterMode = False
        End If

        If Not objWorkbookSheetRexmex.AutoFilterMode Then
            objWorkbookSheetRexmex.Rows(1).AutoFilter
        End If

        Dim ultimoDiaMes
        ultimoDiaMes = DateSerial(Year(Date), ActualMonth + 1, 0)
        ultimoDiaMes = Right("0" & Month(ultimoDiaMes),2) & "-" & Right("0" & Day(ultimoDiaMes),2) & "-" & Year(ultimoDiaMes)

        primerDiaMes = DateSerial(Year(Date), ActualMonth, 1)
        primerDiaMes = Right("0" & Month(primerDiaMes),2) & "-" & Right("0" & Day(primerDiaMes),2) & "-" & Year(primerDiaMes)


        ' Encontrar la última fila con datos en la columna a filtrar 
        lastRow = objWorkbookSheetRexmex.Cells(objWorkbookSheetRexmex.Rows.Count, 1).End(-4162).Row ' -4162 = xlUp

        objWorkbookSheetRexmex.Range(objWorkbookSheetRexmex.Cells(1, 27), objWorkbookSheetRexmex.Cells(lastRow, 27)).AutoFilter _
                                    27, ">=" & CDbl(CDate(primerDiaMes)), 1, "<=" & CDbl(CDate(ultimoDiaMes)), 1

        objWorkbookSheetRexmex.Range(objWorkbookSheetRexmex.Cells(1, 34), objWorkbookSheetRexmex.Cells(lastRow, 34)).AutoFilter _
                                    34, "<>OVERHEAD"

        objWorkbookSheetRexmex.Range(objWorkbookSheetRexmex.Cells(1, 55), objWorkbookSheetRexmex.Cells(lastRow, 55)).AutoFilter _
                                    55, "<>NC"

        objWorkbookSheetRexmex.Range(objWorkbookSheetRexmex.Cells(1, 24), objWorkbookSheetRexmex.Cells(lastRow, 24)).AutoFilter _
                                    24, "=" & sheetName
        
        Set dRange = objWorkbookSheetRexmex.Range(objWorkbookSheetRexmex.Cells(2, 24), objWorkbookSheetRexmex.Cells(lastRow, 71)).SpecialCells(12)

        ' Encontrar la última fila con datos en la hoja de Layout refacturación
        lastRowR = objWorkbookSheetRef.Cells(objWorkbookSheetRef.Rows.Count, 1).End(-4162).Row ' -4162 = xlUp

        ' Copiar los valores de las celdas visibles a la hoja de REXMEX
        dRange.Copy

        ' Mostrar todas las filas de la hoja (quitar ocultamiento)
        objWorkbookSheetRef.Rows.Hidden = False
        ' Mostrar todas las columnas de la hoja (quitar ocultamiento)
        objWorkbookSheetRef.Columns.Hidden = False

        objWorkbookSheetRef.Range("A" & lastRowR + 1).PasteSpecial -4163 ' -4163 = xlPasteAll
        ' Quitar el modo de corte/copia
        objExcel.CutCopyMode = False
    End If
Next

' Encontrar la última fila con datos en la hoja de Layout refacturación
lastRowL = objWorkbookSheetRefL.Cells(objWorkbookSheetRefL.Rows.Count, 1).End(-4162).Row ' -4162 = xlUp

' Ocultar las filas que no cumplen con el criterio de la columna 1 (BL29)
Dim j
For j = 7 To lastRowL
    If objWorkbookSheetRefL.Cells(j, 1).Value <> "BLOQUE 29" Then
        objWorkbookSheetRefL.Rows(j).Hidden = True
    End If
Next

Set objWorkbookSheetRef = objWorkbookPathRef.Worksheets("BL29")
' Encontrar la última fila con datos en la columna a filtrar 
lastRow = objWorkbookSheetRef.Cells(objWorkbookSheetRef.Rows.Count, 1).End(-4162).Row ' -4162 = xlUp
MsgBox "Última fila con datos en BL29: " & lastRow
'Aplica Text to columns en formate General
objWorkbookSheetRef.Range("AG:AG").TextToColumns
' Ordenar de manera ascendente la columna AG (columna 33) "UUID"
With objWorkbookSheetRef.Sort
    .SortFields.Clear
    .SortFields.Add objWorkbookSheetRef.Range("AG2:AG" & lastRow), 0, 1 ' 0 = xlSortOnValues, 1 = xlAscending
    .SetRange objWorkbookSheetRef.Range("A1:AV" & lastRow) ' Ajusta el rango según tus datos
    .Header = 1 ' 1 = xlYes (hay encabezado)
    .Apply
End With
MsgBox "Sort de UUID completado."
' --- Optimización de rendimiento: lectura y escritura por lotes ---
Dim wbsDict, wbsDictH, pepCounterDict
Set wbsDict     = CreateObject("Scripting.Dictionary")
Set wbsDictH    = CreateObject("Scripting.Dictionary")
Set pepCounterDict = CreateObject("Scripting.Dictionary")

Dim data, rowNum, totalRows
Dim wbsValue, agValue, sKey
Dim results()

' Leer todas las filas a un array (más rápido que trabajar directo con Cells)
data = objWorkbookSheetRef.Range("A2:AV" & lastRow).Value ' A = col 1, AG = col 33
totalRows = UBound(data, 1)
ReDim results(totalRows) ' Guardar filas que se deben ocultar

For rowNum = 1 To totalRows ' Ya que empezamos en A2, este es índice 1
    wbsValue = Trim(data(rowNum, 3))     ' Columna C
    agValue  = Trim(data(rowNum, 33))    ' Columna AG
    
    If wbsValue <> "" And agValue <> "" Then
        sKey = agValue & "|" & wbsValue

        ' Contador por UUID
        If Not wbsDict.Exists(agValue) Then
            wbsDict.Add agValue, 1
            pepCounterDict.Add agValue, 0
        Else
            pepCounterDict(agValue) = pepCounterDict(agValue) + 1
            data(rowNum, 33) = agValue & " pep" & pepCounterDict(agValue)
            results(rowNum) = True ' Marcar para ocultar
        End If

        ' Duplicado exacto UUID + WBS
        If wbsDictH.Exists(sKey) Then
            results(rowNum) = True ' Marcar para ocultar
        Else
            wbsDictH.Add sKey, 1
        End If
    End If
Next

' Escribir los datos modificados de vuelta
objWorkbookSheetRef.Range("A2:AG" & lastRow).Value = data

' Ocultar filas en un solo paso
For rowNum = 1 To totalRows
    If results(rowNum) = True Then
        objWorkbookSheetRef.Rows(rowNum + 1).Hidden = True ' +1 por offset a partir de fila 2
    End If
Next

MsgBox "Se han procesado los datos de la hoja BL29."